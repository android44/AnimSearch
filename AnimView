package com.ndk.test;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;

public class AnimView extends View implements View.OnClickListener {

	private int size = 0;
	private Paint wPaint = null;
	private int strokeWidth = 2;
	private int center = 0;
	private AnimType type = AnimType.LEFT_TO_RIGHT;
	private AnimFrame frame;
	private Handler handler;
	private int width = 0;
	private Paint linePaint = new Paint();
	private FrameLayout.LayoutParams params;
	public final static int ANIM_LOCAL = 0;
	public final static int ANIM_TO_WIDTH = 1;
	public final static int ANIM_FROM_WIDTH = 2;
	public final static int ANIM_SEARCH_RUN = 3;
	private int state = ANIM_LOCAL;
	private RectF loval = null;
	private RectF roval = null;
	private int max_width = 0;
	private boolean isSreachAnim = false;
	private Paint sPaint = new Paint();
	private int arc_state = 1;
	private int location_state = 1;
	private int search_step = 0;
	private int line_location = 0;
	Handler mhandler= new Handler(){

		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			super.handleMessage(msg);
			invalidate();
		}
		
	};
	public AnimView(Context context, AnimFrame mframe, int msize) {
		super(context);
		// TODO Auto-generated constructor stub
		this.frame = mframe;
		this.size = msize;
		center = size >> 1;
		initView(context);
	}

	public void setAnimType(AnimType mtype) {
		this.type = mtype;
	}

	public void setHandler(Handler mhandler) {
		this.handler = mhandler;
	}

	private void initView(Context context) {
		wPaint = new Paint();
		wPaint.setColor(Color.GRAY);
		wPaint.setStyle(Paint.Style.STROKE);
		wPaint.setStrokeWidth(strokeWidth);
		wPaint.setAntiAlias(true);
		linePaint.setAntiAlias(true);
		linePaint.setColor(Color.GRAY);
		linePaint.setStrokeWidth(strokeWidth);
		sPaint.setAntiAlias(true);
		sPaint.setColor(Color.BLUE);
		sPaint.setStrokeWidth(strokeWidth+1);
		this.setOnClickListener(this);
		search_step = (int) (2*Math.PI*center/4);

	}

	public void setStrokePaint(int color, int strokeWidth) {
		wPaint.setColor(color);
		wPaint.setStrokeWidth(strokeWidth);
	}
	
	public void setSearchPaintColor(int color, int strokeWidth){
		sPaint.setColor(color);
		sPaint.setStrokeWidth(strokeWidth);
	}

	public void animStep(int step) {
		this.width = step;
		invalidate();
	}

	public void setMaxWidth(int maxw) {
		this.max_width = maxw;
	}
	
	public boolean isSearchRun(){
		return isSreachAnim;
	}
	
	public void startSearchAnim() {
		isSreachAnim = true;
		state = ANIM_SEARCH_RUN;
		invalidate();
	}

	public void stopSearchAnim() {
		if(isSreachAnim){
			isSreachAnim = false;
		}
	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		// TODO Auto-generated method stub
		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
		// setMeasuredDimension(size,size);}

	}

	@Override
	protected void onLayout(boolean changed, int left, int top, int right,
			int bottom) {
		// TODO Auto-generated method stub
		super.onLayout(changed, left, top, right, bottom);
	}

	@Override
	protected void onDraw(Canvas canvas) {
		// TODO Auto-generated method stub
		super.onDraw(canvas);
		if (state == ANIM_LOCAL) {
			canvas.drawCircle(center, center, center - strokeWidth, wPaint);
		}
		if (state == ANIM_TO_WIDTH) {
			params = (LayoutParams) this.getLayoutParams();
			loval = new RectF();
			roval = new RectF();
			params.width = size + width;
			this.setLayoutParams(params);
			loval.left = strokeWidth * 2;
			loval.top = 0;
			loval.right = size + strokeWidth * 2;
			loval.bottom = size;
			canvas.drawArc(loval, 90, 180, false, wPaint);
			roval.left = width - strokeWidth * 4;
			roval.top = 0;
			roval.right = size + width - strokeWidth * 4;
			roval.bottom = size;
			canvas.drawArc(roval, 270, 180, false, wPaint);
			canvas.drawLine(center, 0, center + width, 0, linePaint);
			canvas.drawLine(center, size, center + width, size, linePaint);

		}
		if (state == ANIM_FROM_WIDTH) {
			if (0 == width) {
				params = (LayoutParams) this.getLayoutParams();
				params.width = size;
				this.setLayoutParams(params);
				canvas.drawCircle(center, center, center - strokeWidth, wPaint);
			} else if (width - strokeWidth * 4 >= 0) {
				params = (LayoutParams) this.getLayoutParams();
				params.width = size + width;
				this.setLayoutParams(params);
				loval.left = strokeWidth * 2;
				loval.top = 0;
				loval.right = size + strokeWidth * 2;
				loval.bottom = size;
				canvas.drawArc(loval, 90, 180, false, wPaint);
				roval.left = width - strokeWidth * 4;
				roval.top = 0;
				roval.right = size + width - strokeWidth * 4;
				roval.bottom = size;
				canvas.drawArc(roval, 270, 180, false, wPaint);
				canvas.drawLine(center, 0, center + width, 0, linePaint);
				canvas.drawLine(center, size, center + width, size, linePaint);
			}
		}
		if(state == ANIM_SEARCH_RUN){
			loval = new RectF();
			roval = new RectF();
			loval.left = strokeWidth * 2;
			loval.top = 0;
			loval.right = size + strokeWidth * 2;
			loval.bottom = size;
			canvas.drawArc(loval, 90, 180, false, wPaint);
			roval.left = width - strokeWidth * 4;
			roval.top = 0;
			roval.right = size + width - strokeWidth * 4;
			roval.bottom = size;
			canvas.drawArc(roval, 270, 180, false, wPaint);
			canvas.drawLine(center, 0, center + width, 0, linePaint);
			canvas.drawLine(center, size, center + width, size, linePaint);
			if(location_state == 1){
				if(arc_state == 1){
					canvas.drawArc(loval, 180, 90, false, sPaint);
					arc_state++;
					if(isSreachAnim){
						mhandler.sendEmptyMessage(0);
					} else{
						location_state = 1;
					}
					return;
				} else{
					canvas.drawArc(loval, 90, 90, false, sPaint);
					location_state++;
					arc_state = 1;
				}
			}
			else if(location_state == 2){
				if(line_location == 0){
					canvas.drawLine(center+line_location, size, center+line_location+search_step, size, sPaint );
					line_location+=search_step;
				} else{
					if(line_location+search_step > width){
						line_location = width - search_step;
						canvas.drawLine(center+line_location, size, center+line_location+search_step, size, sPaint );
						location_state++;
					} else{
						canvas.drawLine(center+line_location, size, center+line_location+search_step, size, sPaint );
						line_location+=search_step;
					}
				}
				
			}
			else if(location_state == 3){
				if(arc_state == 1){
					canvas.drawArc(roval, 0, 90, false, sPaint );
					arc_state++;
				} else{
					canvas.drawArc(roval, 270, 90, false, sPaint );
					location_state++;
					arc_state = 1;
					line_location = width - search_step;
				}
				
			}
			else if(location_state == 4){
				if(line_location == 0){
					canvas.drawLine(center+line_location, 0, center+line_location+search_step, 0, sPaint );
					line_location-=search_step;
				} else{
					if(line_location <= 0){
						line_location = 0;
						canvas.drawLine(center+line_location, 0, center+line_location+search_step, 0, sPaint );
						location_state = 1;
					} else{
						canvas.drawLine(center+line_location, 0, center+line_location+search_step, 0, sPaint );
						line_location-=search_step;
					}
				}
				
			}
			if(isSreachAnim){
				mhandler.sendEmptyMessageDelayed(0, 200);
			} else{
				location_state = 1;
			}
			
		}
	}

	public void setState(int mstate) {
		this.state = mstate;
	}
	
	public int getState(){
		return state;
	}

	interface AnimInterface {
		void animStart();

		void animRun();

		void animFinish();
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		state = ANIM_TO_WIDTH;
		frame.animStart();
		handler.sendEmptyMessage(1);

	}

	public static enum AnimType {
		LEFT_TO_RIGHT, RIGHT_TO_LEFT, CENTER_SIDES
	}

}
